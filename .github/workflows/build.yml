name: Build for all

on:
  push:
    branches: [ master, RS3 ]
  pull_request:
    branches: [ master, RS3 ]
  release:
    types: [ created ]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


jobs:
  winbuild2017:
    name: Windows (VS 2017)
    runs-on: windows-2019
    env:
      SOLUTION_FILE_PATH: RecStrip_VS/RecStrip.sln

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Use VS 2017 project
      run: mv -Force RecStrip_VS/RecStrip_2017.vcxproj RecStrip_VS/RecStrip.vcxproj

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
#      with:
#        vs-version: '[10.0,10.1)'

    - name: Build x86
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=Release /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}}
        move "RecStrip_VS\Release\RecStrip.exe" "RecStrip_VS\RecStrip_Win32.exe"

    - name: Build x64
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=Release /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}
        move "RecStrip_VS\x64\Release\RecStrip.exe" "RecStrip_VS\RecStrip_x64.exe"

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_VS2017
        path: |
          ${{ github.workspace }}/RecStrip_VS/RecStrip_Win32.exe
          ${{ github.workspace }}/RecStrip_VS/RecStrip_x64.exe
  
    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: Compress-Archive -Path ${{ github.workspace }}\RecStrip_VS\RecStrip*.exe,${{ github.workspace }}/SenderMap.txt -DestinationPath RecStrip_VS2017.zip

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_VS2017.zip

  winbuild2010:
    name: Windows (VS 2010 Docker)
    runs-on: windows-2019
    env:
      SOLUTION_FILE_PATH: RecStrip_VS/RecStrip.sln

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Compile code in container
      run: |
        docker run --rm -v ${{ github.workspace }}:C:/source/ --workdir "C:/source" --entrypoint "cmd" cwuensch/vs2010:minimal2 /c "MSBuild /m /p:Configuration=Release /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}} && MSBuild /m /p:Configuration=Release /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}"
#        docker run --rm -v ${{ github.workspace }}:C:/source/ --workdir "C:/source" --entrypoint "cmd" cwuensch/vs2010:vcexpress /c "MSBuild /m /p:Configuration=Release /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}} && MSBuild /m /p:Configuration=Release /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}"
#      uses: docker://cwuensch/vs2010:vcexpress
#      with:
#        entrypoint: cmd
#        args: /c "C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe /m /p:Configuration=Release /p:Platform=Win32 ${{env.SOLUTION_FILE_PATH}} && C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe /m /p:Configuration=Release /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}"

    - name: Rename compiled files
      run: |
        move "RecStrip_VS\Release\RecStrip.exe" "RecStrip_VS\RecStrip_Win32.exe"
        move "RecStrip_VS\x64\Release\RecStrip.exe" "RecStrip_VS\RecStrip_x64.exe"

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_Windows
        path: |
          ${{ github.workspace }}/RecStrip_VS/RecStrip_Win32.exe
          ${{ github.workspace }}/RecStrip_VS/RecStrip_x64.exe

    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: Compress-Archive -Path ${{ github.workspace }}\RecStrip_VS\RecStrip*.exe,${{ github.workspace }}/SenderMap.txt -DestinationPath RecStrip_Windows.zip

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_Windows.zip

  mingwbuild:
    name: Build with MinGW
    runs-on: ubuntu-latest

    steps:
    - name: Install MinGW-w64 GCC
      run: sudo apt-get install -y gcc-mingw-w64

    - name: Checkout repository and submodules
      uses: actions/checkout@v2
#      with:
#        submodules: recursive

    - name: Adapt Makefile for MinGW
      run: |
        rm RecStrip*.exe
        cp Synology/Makefile .
        sed -i 's/^include \/env.mak//' Makefile
        sed -i 's/\$(CC) \$(CFLAGS) -rdynamic/\$(CC) \$(CFLAGS) -DUNICODE/' Makefile
        sed -i 's/CFLAGS2   ?= -O2/CFLAGS2   ?=/' Makefile

    - name: Compile MinGW x86
      run: |
        rm -f RecStrip *.o
        CC=i686-w64-mingw32-gcc make
        mv RecStrip.exe RecStrip_Win32.exe

    - name: Compile MinGW x64
      run: |
        rm -f RecStrip *.o
        CC=x86_64-w64-mingw32-gcc make
        mv RecStrip.exe RecStrip_x64.exe

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_MinGW
        path: |
          ${{ github.workspace }}/RecStrip.exe
          ${{ github.workspace }}/RecStrip_x64.exe

    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: zip -9 -r RecStrip_MinGW.zip RecStrip*.exe SenderMap.txt

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_MinGW.zip


  winbuild_new:
    name: Windows (VS 2010 install)
    runs-on: windows-2019
    env:
      SOLUTION_FILE_PATH: RecStrip_VS/RecStrip.sln

    steps:
    - name: Download VS2010
      uses: actions/checkout@v2
      with:
        repository: cwuensch/VS2010
        ref: minimal
        path: VS2010

#    - name: Install Visual Studio Express 2010 (nicht notwendig!)
#      shell: powershell
#      run: |
#        echo "Downloading..."
#        (New-Object Net.WebClient).DownloadFile('https://github.com/cwuensch/VS2010/raw/vcexpress/VCExpressInstall/VCExpressInstall_1.zip', 'C:\VCExpressInstall_1.zip')
#        (New-Object Net.WebClient).DownloadFile('https://github.com/cwuensch/VS2010/raw/vcexpress/VCExpressInstall/VCExpressInstall_2.zip', 'C:\VCExpressInstall_2.zip')
#        (New-Object Net.WebClient).DownloadFile('https://github.com/cwuensch/VS2010/raw/vcexpress/VCExpressInstall/VCExpressInstall_3.zip', 'C:\VCExpressInstall_3.zip')
#        (New-Object Net.WebClient).DownloadFile('https://github.com/cwuensch/VS2010/raw/vcexpress/VCExpressInstall/VCExpressInstall_dummy.zip', 'C:\VCExpressInstall_dummy.zip')
#        echo "Extracting..."
#        Expand-Archive -Force -Path C:\VCExpressInstall_1.zip -DestinationPath C:\VCExpress
#        Expand-Archive -Force -Path C:\VCExpressInstall_2.zip -DestinationPath C:\VCExpress
#        Expand-Archive -Force -Path C:\VCExpressInstall_3.zip -DestinationPath C:\VCExpress
#        Expand-Archive -Force -Path C:\VCExpressInstall_dummy.zip -DestinationPath C:\VCExpress
#        rm "C:\VCExpressInstall_*"
#        echo "Installing..."
#        ( C:\VCExpress\Setup.exe /quiet | Out-Null ) ; ( echo "" )
#        echo "Deleting..."
#        rm -r -fo "C:\VCExpress"
#        echo "Fertig."
#        exit 0

    - name: Extract Windows SDK 7.1A (ggf. schon vorhanden, muss aber in v7.0A)
      shell: powershell
      run: |
        #echo "Extracting..."
        #Expand-Archive -Force -Path ${{ github.workspace }}/VS2010/WindowsSDK_7.1A.zip -DestinationPath "C:\Program Files (x86)\Microsoft SDKs\Windows\"
        echo "Copying..."
        Rename-Item "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A" "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A.bak"
        New-Item -Path "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A" -ItemType SymbolicLink -Value "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A"
        echo "Registry import..."
        reg import "${{ github.workspace }}/VS2010/WinSDK70.reg"
        reg import "${{ github.workspace }}/VS2010/WinSDK71.reg"
        echo "Deleting..."
        rm "${{ github.workspace }}/VS2010/WindowsSDK_7.1A.zip"

    - name: Extract NETFX Tools
      shell: powershell
      run: |
        echo "Extracting..."
        Expand-Archive -Force -Path ${{ github.workspace }}/VS2010/NETFX_4.0_Tools.zip -DestinationPath "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\"
        echo "Deleting..."
        rm "${{ github.workspace }}/VS2010/NETFX_4.0_Tools.zip"

#    - name: Copy .NET Reference assemblies (ggf. schon vorhanden)
#      shell: powershell
#      run: |
#        echo "Extracting..."
#        Expand-Archive -Force -Path ${{ github.workspace }}/VS2010/Reference_Assemblies.zip -DestinationPath "C:\Program Files (x86)\Reference Assemblies\"
#        echo "Deleting..."
#        rm "${{ github.workspace }}/VS2010/Reference_Assemblies.zip"

    - name: Copy MSBuild Compiler Profiles
      shell: powershell
      run: |
        echo "Extracting..."
        Expand-Archive -Force -Path ${{ github.workspace }}/VS2010/MSBuild_x86.zip -DestinationPath "C:\Program Files (x86)\MSBuild\"
        #New-Item -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v4.0" -ItemType SymbolicLink -Value "C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0"
        echo "Registry import..."
        reg import "${{ github.workspace }}/VS2010/MSBuild.reg"
        echo "Deleting..."
        rm "${{ github.workspace }}/VS2010/MSBuild_x86.zip"

#    - name: Import VS2010 registry entries
#      shell: powershell
#      run: |
#        echo "Downloading..."
#        #(New-Object Net.WebClient).DownloadFile("https://github.com/cwuensch/VS2010/raw/master/VS2010_2.reg", "${{ github.workspace }}\VS2010\VS2010_2.reg")
#        #(New-Object Net.WebClient).DownloadFile("https://github.com/cwuensch/VS2010/raw/master/VS2010_3.reg", "${{ github.workspace }}\VS2010\VS2010_3.reg")
#        #reg import "${{ github.workspace }}/VS2010/VS2010_2.reg"
#        #reg import "${{ github.workspace }}/VS2010/VS2010_3.reg"
#        reg import "${{ github.workspace }}/VS2010/VS.reg"
#        reg add HKLM\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\SxS\VS7 /v "10.0" /t REG_SZ /d "C:\Program Files (x86)\Microsoft Visual Studio 10.0\\"

    - name: Set VS variables
      run: |
        echo "{VSINSTALLDIR}={C:\Program Files (x86)\Microsoft Visual Studio 10.0\}" >> $GITHUB_ENV
        echo "{VCINSTALLDIR}={C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\}" >> $GITHUB_ENV
        echo "{VS100COMNTOOLS}={C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\}" >> $GITHUB_ENV
        echo "{WindowsSdkDir}={C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\}" >> $GITHUB_ENV


    - name: Install VC 2010 SP1 x86 compilers (incl. cross-compiler for x64)
      shell: cmd
      run: |
        echo Installing...
        msiexec /i "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdx86.msi" /quiet /qn
        echo Deleting...
        del "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdx86.msi"
        del "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdx86.cab"

#    - name: Install VC 2010 SP1 native x64 compilers (optional)
#      shell: cmd
#      run: |
#        echo Installing...
#        msiexec /i "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdamd64.msi" /quiet /qn
#        echo Deleting...
#        del "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdamd64.msi"
#        del "${{ github.workspace }}\VS2010\Compiler_SDK7\vc_stdamd64.cab"
#        copy "${{ github.workspace }}\VS2010\vcvars64.bat" "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64\"


    - name: Set path (experimental)
      run: |
        echo "C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\" >> $GITHUB_PATH
        echo "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN" >> $GITHUB_PATH
        echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin" >> $GITHUB_PATH

    - name: Include MSBuild in path (prefer native x64 compiler)
      run: |
        echo "C:\Windows\Microsoft.NET\Framework\v4.0.30319" >> $GITHUB_PATH
        echo "C:\Windows\Microsoft.NET\Framework64\v4.0.30319" >> $GITHUB_PATH

#    - name: Add MSBuild to PATH
#      uses: microsoft/setup-msbuild@v1
#      with:
#        vs-version: '[10.0,10.1)'


    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Build x86
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        VSINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio 10.0\
        VCINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\
        VS100COMNTOOLS: C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\
        WindowsSdkDir: C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\
        LIB: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Lib
        INCLUDE: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\include
        PATH: C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Windows\Microsoft.NET\Framework64\v4.0.30319;${{env.PATH}}
      run: |
        rem call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86
        msbuild /m /p:Configuration=Release /p:Platform=Win32 ${{ env.SOLUTION_FILE_PATH }}
        move "${{ github.workspace }}\RecStrip_VS\Release\RecStrip.exe" "${{ github.workspace }}\RecStrip_VS\RecStrip_Win32.exe"

    - name: Build x64
      shell: cmd
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        VSINSTALLDIR: ${{ env.VSINSTALLDIR }}
        VCINSTALLDIR: ${{ env.VCINSTALLDIR }}
        VS100COMNTOOLS: ${{ env.VS100COMNTOOLS }}
        WindowsSdkDir: ${{ env.WindowsSdkDir }}
        LIB: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib\amd64;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Lib\x64
        INCLUDE: C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\include
        PATH: C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\;C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN;C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin;C:\Windows\Microsoft.NET\Framework\v4.0.30319;C:\Windows\Microsoft.NET\Framework64\v4.0.30319;${{env.PATH}}
      run: |
        rem call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86_amd64
        msbuild /m /p:Configuration=Release /p:Platform=x64 ${{ env.SOLUTION_FILE_PATH }}
        move "${{ github.workspace }}\RecStrip_VS\x64\Release\RecStrip.exe" "${{ github.workspace }}\RecStrip_VS\RecStrip_x64.exe"

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_Windows_new
        path: |
          ${{ github.workspace }}/RecStrip_VS/RecStrip_Win32.exe
          ${{ github.workspace }}/RecStrip_VS/RecStrip_x64.exe
  
    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: Compress-Archive -Path ${{ github.workspace }}\RecStrip_VS\RecStrip*.exe,${{ github.workspace }}/SenderMap.txt -DestinationPath RecStrip_Windows_new.zip

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_Windows_new.zip

# ----------------------------------------------------

  tmsbuild:
    name: Topfield TMS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
#      with:
#        submodules: recursive

    - name: Compile code in container
#      run: |
#        docker run --rm -v ${{ github.workspace }}:/tap --workdir "/tap" --env FBLib="MergeIntoMC" cwuensch/tmsbuild:FBLib "make"
      uses: docker://cwuensch/tmsbuild:FBLib
      with:
        FBLib: MergeIntoMC
        args: make

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_TMS
        path: ${{ github.workspace }}/RecStrip

    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: zip -9 -r RecStrip_TMS.zip RecStrip SenderMap.txt

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_TMS.zip

# ----------------------------------------------------

  linuxbuild:
    name: Build for Linux
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
#      with:
#        submodules: recursive

    - name: Adapt Makefile for non-Topfield
      run: |
        sed -i 's/-DLINUX -D_REENTRANT -static //' Makefile
        sed -i '/include \${BASE}\/include\/tool.mk/d' Makefile

    - name: Compile Linux x64
      run: |
        rm -f RecStrip *.o
        make
        mv RecStrip RecStrip_x64

    - name: Install GCC 32bit libs
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
    
    - name: Adapt Makefile for x86
      run: |
        sed -i 's/CFLAGS   +=/CFLAGS   += -m32/' Makefile
        sed -i 's/CXXFLAGS +=/CXXFLAGS += -m32/' Makefile
        sed -i 's/LDFLAGS  +=/LDFLAGS  += -m32/' Makefile

    - name: Compile Linux x86
      run: |
        rm -f RecStrip *.o
        make

    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_Linux
        path: |
          ${{ github.workspace }}/RecStrip
          ${{ github.workspace }}/RecStrip_x64

    - name: Create zip archive
      if: startsWith(github.ref, 'refs/tags/')
      run: zip -9 -r RecStrip_Linux.zip RecStrip RecStrip_x64 SenderMap.txt

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: RecStrip_Linux.zip

# ----------------------------------------------------

  striptest:
    name: Stripping test
    runs-on: ubuntu-22.04
    needs: linuxbuild
    strategy:
      matrix:
        test: [SD, HD]
        platform: [RecStrip]
    env:
      RS_VER: 2

    steps:

    - name: Determine RecStrip version
      run: |
        echo "Current REF: $GITHUB_REF"
        if [[ $GITHUB_REF == 'refs/heads/RS3' || $GITHUB_REF == refs/tags/RS_3* ]]; then
          echo "Detected RecStrip v3"
          echo "RS_VER=3" >> "$GITHUB_ENV"
        elif [[ $GITHUB_REF == 'refs/heads/master' || $GITHUB_REF == refs/tags/RS_2* ]]; then
          echo "Detected RecStrip v2"
          echo "RS_VER=2" >> "$GITHUB_ENV"
        fi

    - name: Get compiled binaries
      uses: actions/download-artifact@master
      with:
        name: RecStrip_Linux
        path: ${{ github.workspace }}

    - name: Set permissions
      run: chmod a+x ${{ github.workspace }}/RecStrip*

## Use this form of test, if i386-C-libraries in container should be outdated
#    - name: Copy StripTest from Docker container
#      run: |
#        mkdir ${{ github.workspace }}/StripTest
#        chmod a+w ${{ github.workspace }}/StripTest
#        docker run --rm -v ${{ github.workspace }}/StripTest:/host --entrypoint=/bin/bash cwuensch/striptest:${{ matrix.test }}_neu -c "cp -aH /StripTest/* /host/"
#        sudo chown -R $(id -u):$(id -g) ${{ github.workspace }}/StripTest/*
#        chmod a+x ${{ github.workspace }}/StripTest/RunTest.sh
#
#    - name: Perform test (on runner)
#      working-directory: ${{ github.workspace }}/StripTest
#      env:
#        RECSTRIP: "${{ github.workspace }}/${{ matrix.platform }}"
#      run: ./RunTest.sh
#
#    - name: Perform x64 test (on runner)
#      working-directory: ${{ github.workspace }}/StripTest
#      run: ./RunTest.sh ${{env.RS_VER}} "${{ github.workspace }}/RecStrip_x64"

# That would be the "real" test -> does not work anymore because of outdated i386-C-libraries in container
    - name: Perform test (in container)
      run: |
        docker run --rm -v ${{ github.workspace }}:/StripTest/bin --env RS_VER=${{env.RS_VER}} --env RECSTRIP="bin/${{ matrix.platform }}" cwuensch/striptest:${{ matrix.test }}_neu
        docker run --rm -v ${{ github.workspace }}:/StripTest/bin --env RS_VER=${{env.RS_VER}} --env RECSTRIP="bin/RecStrip_x64" cwuensch/striptest:${{ matrix.test }}_neu

#    - name: Perform test (alternative)
#      uses: docker://cwuensch/striptest:${{ matrix.test }}_neu
#      env:
##        RS_VER: ${{ env.RS_VER }}
#        RECSTRIP: /github/workspace/${{ matrix.platform }}
##      with:
##        args: ${{ env.RS_VER }} /github/workspace/${{ matrix.platform }}

# ----------------------------------------------------

  synobuild:
    name: Synology (${{ matrix.platform }}-${{ matrix.version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [6.1]
        platform: [rtd1296, x64]

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
#      with:
#        submodules: recursive

    - name: Prepare code
      run: |
        cp -R Synology/* .
        mkdir -p target

    - name: Compile code in container
      run: |
        docker run --privileged --name SynoBuild -v ${{ github.workspace }}/..:/toolkit/source:ro cwuensch/synobuild:${{ matrix.platform }}_${{ matrix.version }} -I RecStrip
        echo "docker cp SynoBuild:/toolkit/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/source/RecStrip/RecStrip ${{ github.workspace }}/target/RecStrip_${{ matrix.platform }}"
        docker cp SynoBuild:/toolkit/build_base/source/RecStrip/RecStrip ${{ github.workspace }}/target/RecStrip_${{ matrix.platform }}
        
    - name: Copy build artefact
      uses: actions/upload-artifact@v2
      with:
        name: RecStrip_Synology
        path: |
          ${{ github.workspace }}/target/RecStrip_${{ matrix.platform }}
          ${{ github.workspace }}/SenderMap.txt

  synoupload:
    name: Upload Synology release
    runs-on: ubuntu-latest
    needs: synobuild
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2

    - name: Create zip archive
      run: |
        cd ${{ github.workspace }}/RecStrip_Synology
        ls -la
        zip -9 -r ${{ github.workspace }}/RecStrip_Synology.zip RecStrip* SenderMap.txt

    - name: Upload release binaries
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ github.workspace }}/RecStrip_Synology.zip
